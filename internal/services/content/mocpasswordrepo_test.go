// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/content/password.go

// Package content is a generated GoMock package.
package content

import (
	context "context"
	models "passkeeper/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockpasswordRepository is a mock of passwordRepository interface.
type MockpasswordRepository struct {
	ctrl     *gomock.Controller
	recorder *MockpasswordRepositoryMockRecorder
}

// MockpasswordRepositoryMockRecorder is the mock recorder for MockpasswordRepository.
type MockpasswordRepositoryMockRecorder struct {
	mock *MockpasswordRepository
}

// NewMockpasswordRepository creates a new mock instance.
func NewMockpasswordRepository(ctrl *gomock.Controller) *MockpasswordRepository {
	mock := &MockpasswordRepository{ctrl: ctrl}
	mock.recorder = &MockpasswordRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpasswordRepository) EXPECT() *MockpasswordRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockpasswordRepository) Create(ctx context.Context, content models.PasswordContent, comment models.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, content, comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockpasswordRepositoryMockRecorder) Create(ctx, content, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockpasswordRepository)(nil).Create), ctx, content, comment)
}

// DeleteByUserIDAndID mocks base method.
func (m *MockpasswordRepository) DeleteByUserIDAndID(ctx context.Context, userID, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByUserIDAndID", ctx, userID, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByUserIDAndID indicates an expected call of DeleteByUserIDAndID.
func (mr *MockpasswordRepositoryMockRecorder) DeleteByUserIDAndID(ctx, userID, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByUserIDAndID", reflect.TypeOf((*MockpasswordRepository)(nil).DeleteByUserIDAndID), ctx, userID, id)
}

// GetByUserID mocks base method.
func (m *MockpasswordRepository) GetByUserID(ctx context.Context, userID int64) ([]models.PasswordWithComment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", ctx, userID)
	ret0, _ := ret[0].([]models.PasswordWithComment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID.
func (mr *MockpasswordRepositoryMockRecorder) GetByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockpasswordRepository)(nil).GetByUserID), ctx, userID)
}

// GetByUserIDAndId mocks base method.
func (m *MockpasswordRepository) GetByUserIDAndId(ctx context.Context, userID, id int64) (*models.PasswordContent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserIDAndId", ctx, userID, id)
	ret0, _ := ret[0].(*models.PasswordContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserIDAndId indicates an expected call of GetByUserIDAndId.
func (mr *MockpasswordRepositoryMockRecorder) GetByUserIDAndId(ctx, userID, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserIDAndId", reflect.TypeOf((*MockpasswordRepository)(nil).GetByUserIDAndId), ctx, userID, id)
}
