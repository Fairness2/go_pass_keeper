// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/content/card.go

// Package content is a generated GoMock package.
package content

import (
	context "context"
	models "passkeeper/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockcardRepository is a mock of cardRepository interface.
type MockcardRepository struct {
	ctrl     *gomock.Controller
	recorder *MockcardRepositoryMockRecorder
}

// MockcardRepositoryMockRecorder is the mock recorder for MockcardRepository.
type MockcardRepositoryMockRecorder struct {
	mock *MockcardRepository
}

// NewMockcardRepository creates a new mock instance.
func NewMockcardRepository(ctrl *gomock.Controller) *MockcardRepository {
	mock := &MockcardRepository{ctrl: ctrl}
	mock.recorder = &MockcardRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcardRepository) EXPECT() *MockcardRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockcardRepository) Create(ctx context.Context, content models.CardContent, comment models.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, content, comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockcardRepositoryMockRecorder) Create(ctx, content, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockcardRepository)(nil).Create), ctx, content, comment)
}

// DeleteByUserIDAndID mocks base method.
func (m *MockcardRepository) DeleteByUserIDAndID(ctx context.Context, userID, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByUserIDAndID", ctx, userID, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByUserIDAndID indicates an expected call of DeleteByUserIDAndID.
func (mr *MockcardRepositoryMockRecorder) DeleteByUserIDAndID(ctx, userID, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByUserIDAndID", reflect.TypeOf((*MockcardRepository)(nil).DeleteByUserIDAndID), ctx, userID, id)
}

// GetByUserID mocks base method.
func (m *MockcardRepository) GetByUserID(ctx context.Context, userID int64) ([]models.CardWithComment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", ctx, userID)
	ret0, _ := ret[0].([]models.CardWithComment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID.
func (mr *MockcardRepositoryMockRecorder) GetByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockcardRepository)(nil).GetByUserID), ctx, userID)
}

// GetByUserIDAndId mocks base method.
func (m *MockcardRepository) GetByUserIDAndId(ctx context.Context, userID, id int64) (*models.CardContent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserIDAndId", ctx, userID, id)
	ret0, _ := ret[0].(*models.CardContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserIDAndId indicates an expected call of GetByUserIDAndId.
func (mr *MockcardRepositoryMockRecorder) GetByUserIDAndId(ctx, userID, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserIDAndId", reflect.TypeOf((*MockcardRepository)(nil).GetByUserIDAndId), ctx, userID, id)
}
