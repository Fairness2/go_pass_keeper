// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repositories/executor.go

// Package repositories is a generated GoMock package.
package repositories

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
)

// MockOldSQLExecutor is a mock of OldSQLExecutor interface.
type MockOldSQLExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockOldSQLExecutorMockRecorder
}

// MockOldSQLExecutorMockRecorder is the mock recorder for MockOldSQLExecutor.
type MockOldSQLExecutorMockRecorder struct {
	mock *MockOldSQLExecutor
}

// NewMockOldSQLExecutor creates a new mock instance.
func NewMockOldSQLExecutor(ctrl *gomock.Controller) *MockOldSQLExecutor {
	mock := &MockOldSQLExecutor{ctrl: ctrl}
	mock.recorder = &MockOldSQLExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOldSQLExecutor) EXPECT() *MockOldSQLExecutorMockRecorder {
	return m.recorder
}

// BeginTxx mocks base method.
func (m *MockOldSQLExecutor) BeginTxx(ctx context.Context, opts *sql.TxOptions) (*sqlx.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTxx", ctx, opts)
	ret0, _ := ret[0].(*sqlx.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTxx indicates an expected call of BeginTxx.
func (mr *MockOldSQLExecutorMockRecorder) BeginTxx(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTxx", reflect.TypeOf((*MockOldSQLExecutor)(nil).BeginTxx), ctx, opts)
}

// NamedExecContext mocks base method.
func (m *MockOldSQLExecutor) NamedExecContext(ctx context.Context, query string, arg interface{}) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamedExecContext", ctx, query, arg)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NamedExecContext indicates an expected call of NamedExecContext.
func (mr *MockOldSQLExecutorMockRecorder) NamedExecContext(ctx, query, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamedExecContext", reflect.TypeOf((*MockOldSQLExecutor)(nil).NamedExecContext), ctx, query, arg)
}

// PrepareNamed mocks base method.
func (m *MockOldSQLExecutor) PrepareNamed(query string) (*sqlx.NamedStmt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareNamed", query)
	ret0, _ := ret[0].(*sqlx.NamedStmt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareNamed indicates an expected call of PrepareNamed.
func (mr *MockOldSQLExecutorMockRecorder) PrepareNamed(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareNamed", reflect.TypeOf((*MockOldSQLExecutor)(nil).PrepareNamed), query)
}

// QueryRowContext mocks base method.
func (m *MockOldSQLExecutor) QueryRowContext(ctx context.Context, query string, args ...any) *sql.Row {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRowContext", varargs...)
	ret0, _ := ret[0].(*sql.Row)
	return ret0
}

// QueryRowContext indicates an expected call of QueryRowContext.
func (mr *MockOldSQLExecutorMockRecorder) QueryRowContext(ctx, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRowContext", reflect.TypeOf((*MockOldSQLExecutor)(nil).QueryRowContext), varargs...)
}

// QueryRowxContext mocks base method.
func (m *MockOldSQLExecutor) QueryRowxContext(ctx context.Context, query string, args ...interface{}) *sqlx.Row {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRowxContext", varargs...)
	ret0, _ := ret[0].(*sqlx.Row)
	return ret0
}

// QueryRowxContext indicates an expected call of QueryRowxContext.
func (mr *MockOldSQLExecutorMockRecorder) QueryRowxContext(ctx, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRowxContext", reflect.TypeOf((*MockOldSQLExecutor)(nil).QueryRowxContext), varargs...)
}

// SelectContext mocks base method.
func (m *MockOldSQLExecutor) SelectContext(ctx context.Context, dest interface{}, query string, args ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, dest, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SelectContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SelectContext indicates an expected call of SelectContext.
func (mr *MockOldSQLExecutorMockRecorder) SelectContext(ctx, dest, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, dest, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectContext", reflect.TypeOf((*MockOldSQLExecutor)(nil).SelectContext), varargs...)
}

// MockIRow is a mock of IRow interface.
type MockIRow struct {
	ctrl     *gomock.Controller
	recorder *MockIRowMockRecorder
}

// MockIRowMockRecorder is the mock recorder for MockIRow.
type MockIRowMockRecorder struct {
	mock *MockIRow
}

// NewMockIRow creates a new mock instance.
func NewMockIRow(ctrl *gomock.Controller) *MockIRow {
	mock := &MockIRow{ctrl: ctrl}
	mock.recorder = &MockIRowMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRow) EXPECT() *MockIRowMockRecorder {
	return m.recorder
}

// Err mocks base method.
func (m *MockIRow) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockIRowMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockIRow)(nil).Err))
}

// Scan mocks base method.
func (m *MockIRow) Scan(dest ...any) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range dest {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Scan", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockIRowMockRecorder) Scan(dest ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockIRow)(nil).Scan), dest...)
}

// StructScan mocks base method.
func (m *MockIRow) StructScan(dest any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StructScan", dest)
	ret0, _ := ret[0].(error)
	return ret0
}

// StructScan indicates an expected call of StructScan.
func (mr *MockIRowMockRecorder) StructScan(dest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StructScan", reflect.TypeOf((*MockIRow)(nil).StructScan), dest)
}

// MockITX is a mock of ITX interface.
type MockITX struct {
	ctrl     *gomock.Controller
	recorder *MockITXMockRecorder
}

// MockITXMockRecorder is the mock recorder for MockITX.
type MockITXMockRecorder struct {
	mock *MockITX
}

// NewMockITX creates a new mock instance.
func NewMockITX(ctrl *gomock.Controller) *MockITX {
	mock := &MockITX{ctrl: ctrl}
	mock.recorder = &MockITXMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITX) EXPECT() *MockITXMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockITX) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockITXMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockITX)(nil).Commit))
}

// ExecContext mocks base method.
func (m *MockITX) ExecContext(ctx context.Context, query string, args ...any) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecContext", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContext indicates an expected call of ExecContext.
func (mr *MockITXMockRecorder) ExecContext(ctx, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContext", reflect.TypeOf((*MockITX)(nil).ExecContext), varargs...)
}

// NamedExecContext mocks base method.
func (m *MockITX) NamedExecContext(ctx context.Context, query string, arg interface{}) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamedExecContext", ctx, query, arg)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NamedExecContext indicates an expected call of NamedExecContext.
func (mr *MockITXMockRecorder) NamedExecContext(ctx, query, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamedExecContext", reflect.TypeOf((*MockITX)(nil).NamedExecContext), ctx, query, arg)
}

// PrepareNamed mocks base method.
func (m *MockITX) PrepareNamed(query string) (INamedStmt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareNamed", query)
	ret0, _ := ret[0].(INamedStmt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareNamed indicates an expected call of PrepareNamed.
func (mr *MockITXMockRecorder) PrepareNamed(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareNamed", reflect.TypeOf((*MockITX)(nil).PrepareNamed), query)
}

// Rollback mocks base method.
func (m *MockITX) Rollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockITXMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockITX)(nil).Rollback))
}

// MockIStmt is a mock of IStmt interface.
type MockIStmt struct {
	ctrl     *gomock.Controller
	recorder *MockIStmtMockRecorder
}

// MockIStmtMockRecorder is the mock recorder for MockIStmt.
type MockIStmtMockRecorder struct {
	mock *MockIStmt
}

// NewMockIStmt creates a new mock instance.
func NewMockIStmt(ctrl *gomock.Controller) *MockIStmt {
	mock := &MockIStmt{ctrl: ctrl}
	mock.recorder = &MockIStmtMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIStmt) EXPECT() *MockIStmtMockRecorder {
	return m.recorder
}

// QueryRowxContext mocks base method.
func (m *MockIStmt) QueryRowxContext(ctx context.Context, arg interface{}) IRow {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryRowxContext", ctx, arg)
	ret0, _ := ret[0].(IRow)
	return ret0
}

// QueryRowxContext indicates an expected call of QueryRowxContext.
func (mr *MockIStmtMockRecorder) QueryRowxContext(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRowxContext", reflect.TypeOf((*MockIStmt)(nil).QueryRowxContext), ctx, arg)
}

// MockINamedStmt is a mock of INamedStmt interface.
type MockINamedStmt struct {
	ctrl     *gomock.Controller
	recorder *MockINamedStmtMockRecorder
}

// MockINamedStmtMockRecorder is the mock recorder for MockINamedStmt.
type MockINamedStmtMockRecorder struct {
	mock *MockINamedStmt
}

// NewMockINamedStmt creates a new mock instance.
func NewMockINamedStmt(ctrl *gomock.Controller) *MockINamedStmt {
	mock := &MockINamedStmt{ctrl: ctrl}
	mock.recorder = &MockINamedStmtMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockINamedStmt) EXPECT() *MockINamedStmtMockRecorder {
	return m.recorder
}

// QueryRowxContext mocks base method.
func (m *MockINamedStmt) QueryRowxContext(ctx context.Context, arg interface{}) IRow {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryRowxContext", ctx, arg)
	ret0, _ := ret[0].(IRow)
	return ret0
}

// QueryRowxContext indicates an expected call of QueryRowxContext.
func (mr *MockINamedStmtMockRecorder) QueryRowxContext(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRowxContext", reflect.TypeOf((*MockINamedStmt)(nil).QueryRowxContext), ctx, arg)
}

// MockSQLExecutor is a mock of SQLExecutor interface.
type MockSQLExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockSQLExecutorMockRecorder
}

// MockSQLExecutorMockRecorder is the mock recorder for MockSQLExecutor.
type MockSQLExecutorMockRecorder struct {
	mock *MockSQLExecutor
}

// NewMockSQLExecutor creates a new mock instance.
func NewMockSQLExecutor(ctrl *gomock.Controller) *MockSQLExecutor {
	mock := &MockSQLExecutor{ctrl: ctrl}
	mock.recorder = &MockSQLExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSQLExecutor) EXPECT() *MockSQLExecutorMockRecorder {
	return m.recorder
}

// BeginTxx mocks base method.
func (m *MockSQLExecutor) BeginTxx(ctx context.Context, opts *sql.TxOptions) (ITX, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTxx", ctx, opts)
	ret0, _ := ret[0].(ITX)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTxx indicates an expected call of BeginTxx.
func (mr *MockSQLExecutorMockRecorder) BeginTxx(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTxx", reflect.TypeOf((*MockSQLExecutor)(nil).BeginTxx), ctx, opts)
}

// ExecContext mocks base method.
func (m *MockSQLExecutor) ExecContext(ctx context.Context, query string, args ...any) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecContext", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContext indicates an expected call of ExecContext.
func (mr *MockSQLExecutorMockRecorder) ExecContext(ctx, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContext", reflect.TypeOf((*MockSQLExecutor)(nil).ExecContext), varargs...)
}

// NamedExecContext mocks base method.
func (m *MockSQLExecutor) NamedExecContext(ctx context.Context, query string, arg interface{}) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamedExecContext", ctx, query, arg)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NamedExecContext indicates an expected call of NamedExecContext.
func (mr *MockSQLExecutorMockRecorder) NamedExecContext(ctx, query, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamedExecContext", reflect.TypeOf((*MockSQLExecutor)(nil).NamedExecContext), ctx, query, arg)
}

// PrepareNamed mocks base method.
func (m *MockSQLExecutor) PrepareNamed(query string) (INamedStmt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareNamed", query)
	ret0, _ := ret[0].(INamedStmt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareNamed indicates an expected call of PrepareNamed.
func (mr *MockSQLExecutorMockRecorder) PrepareNamed(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareNamed", reflect.TypeOf((*MockSQLExecutor)(nil).PrepareNamed), query)
}

// QueryRowContext mocks base method.
func (m *MockSQLExecutor) QueryRowContext(ctx context.Context, query string, args ...any) IRow {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRowContext", varargs...)
	ret0, _ := ret[0].(IRow)
	return ret0
}

// QueryRowContext indicates an expected call of QueryRowContext.
func (mr *MockSQLExecutorMockRecorder) QueryRowContext(ctx, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRowContext", reflect.TypeOf((*MockSQLExecutor)(nil).QueryRowContext), varargs...)
}

// QueryRowxContext mocks base method.
func (m *MockSQLExecutor) QueryRowxContext(ctx context.Context, query string, args ...interface{}) IRow {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRowxContext", varargs...)
	ret0, _ := ret[0].(IRow)
	return ret0
}

// QueryRowxContext indicates an expected call of QueryRowxContext.
func (mr *MockSQLExecutorMockRecorder) QueryRowxContext(ctx, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRowxContext", reflect.TypeOf((*MockSQLExecutor)(nil).QueryRowxContext), varargs...)
}

// SelectContext mocks base method.
func (m *MockSQLExecutor) SelectContext(ctx context.Context, dest interface{}, query string, args ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, dest, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SelectContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SelectContext indicates an expected call of SelectContext.
func (mr *MockSQLExecutorMockRecorder) SelectContext(ctx, dest, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, dest, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectContext", reflect.TypeOf((*MockSQLExecutor)(nil).SelectContext), varargs...)
}
